"argument c might be too low so solver can not find solution")
return(NULL)
}
)
}
w_MaxDD_c018 <- portfolioMaxDD(X_log_trn, c = 0.18)
w_MaxDD_c021 <- portfolioMaxDD(X_log_trn, c = 0.21)
w_MaxDD_c024 <- portfolioMaxDD(X_log_trn, c = 0.24)
# combine portfolios
w_all <- cbind(w_all,
"Max-DD-c-018" = w_MaxDD_c018,
"Max-DD-c-021" = w_MaxDD_c021,
"Max-DD-c-024" = w_MaxDD_c024)
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_trn))
t(maxDrawdown(ret_all_tst))
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_all <- w_all[, ! colnames(w_all) %in% c("Max-DD-c-021", "Max-DD-c-024")]
rm(list=ls())
for (file in list.files(path = "code/", full.names = TRUE)) source(file)
from = "2013-01-01"
to = "2016-12-31"
tickers <- c("AAPL", "AMD", "ADI",  "ABBV", "AEZS", "A",  "APD", "AA","CF")
assign_variable_global_env(tickers, from, to, ratio = 0.7)
N <- ncol(prices)
T <- nrow(prices)
T_trn <- round(T*0.7)
X <- X_log
mu <- colMeans(X)
Sigma <- cov(X)
plot(prices/rep(prices[1, ], each = nrow(prices)), col = rainbow10equal, legend.loc = "topleft",main = "Normalized prices")
w_Markowitz <- MVP(mu, Sigma, lmd = 0.5, long_only = TRUE)
w_GMVP <- GMVP(Sigma, long_only = TRUE)
w_all <- cbind("GMVP"      = w_GMVP,
"Markowitz" = w_Markowitz)
barplot(t(w_all), col = rainbow10equal[1:2], legend = colnames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "stocks", ylab = "dollars")
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_trn))
t(table.AnnualizedReturns(ret_all_tst))
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich10equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich10equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_DR_alpha1 <- portfolioDR(X_log_trn, alpha = 1)
w_DR_alpha2 <- portfolioDR(X_log_trn, alpha = 2)
w_DR_alpha3 <- portfolioDR(X_log_trn, alpha = 3)
# combine portfolios
w_all <- cbind(
w_all,
"DR-alpha-1" = w_DR_alpha1,
"DR-alpha-2" = w_DR_alpha2,
"DR-alpha-3" = w_DR_alpha3
)
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_trn))
t(table.AnnualizedReturns(ret_all_tst))
table.DownsideRisk(ret_all_tst)
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich6equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich6equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich6equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_all <- w_all[, ! colnames(w_all) %in% c("DR-alpha-1", "DR-alpha-2")]
w_CVaR095 <- portolioCVaR(X_log_trn, alpha = 0.95)
w_CVaR099 <- portolioCVaR(X_log_trn, alpha = 0.99)
# combine portfolios
w_all <- cbind(w_all,
"CVaR-alpha-0.95" = w_CVaR095,
"CVaR-alpha-0.99" = w_CVaR099)
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_trn))
t(table.AnnualizedReturns(ret_all_tst))
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich6equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich6equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich6equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_all <- w_all[, ! colnames(w_all) %in% c("CVaR-alpha-0.95")]
View(w_all)
w_MaxDD_c018
# solver may not find a solution for some c if c is too low
w_MaxDD_c018 <- portfolioMaxDD(X_log_trn, c = 0.18)
source('C:/Users/jshen/Desktop/EDHEC/portr/code/port_design.R', echo=TRUE)
# solver may not find a solution for some c if c is too low
w_MaxDD_c018 <- portfolioMaxDD(X_log_trn, c = 0.18)
w_MaxDD_c021 <- portfolioMaxDD(X_log_trn, c = 0.21)
w_MaxDD_c024 <- portfolioMaxDD(X_log_trn, c = 0.24)
# combine portfolios
w_all <- cbind(w_all,
"Max-DD-c-018" = w_MaxDD_c018,
"Max-DD-c-021" = w_MaxDD_c021,
"Max-DD-c-024" = w_MaxDD_c024)
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_trn))
t(maxDrawdown(ret_all_tst))
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_all <- w_all[, ! colnames(w_all) %in% c("Max-DD-c-021", "Max-DD-c-024")]
View(w_all)
w_all <- w_all[, ! colnames(w_all) %in% c("Max-DD-c-018", "Max-DD-c-024")]
View(w_all)
View(w_all)
# solver may not find a solution for some c if c is too low
w_MaxDD_c018 <- portfolioMaxDD(X_log_trn, c = 0.18)
w_MaxDD_c021 <- portfolioMaxDD(X_log_trn, c = 0.21)
w_MaxDD_c024 <- portfolioMaxDD(X_log_trn, c = 0.24)
# combine portfolios
w_all <- cbind(w_all,
"Max-DD-c-018" = w_MaxDD_c018,
"Max-DD-c-021" = w_MaxDD_c021,
"Max-DD-c-024" = w_MaxDD_c024)
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_trn))
t(maxDrawdown(ret_all_tst))
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_all <- w_all[, ! colnames(w_all) %in% c("Max-DD-c-018", "Max-DD-c-024")]
View(w_all)
portfolioAveDD <- function(X, c = 0.2) {
T <- nrow(X)
N <- ncol(X)
X <- as.matrix(X)
X_cum <- apply(X, MARGIN = 2, FUN = cumsum)
mu <- colMeans(X)
# variables
w <- Variable(N)
u <- Variable(T)
# problem
prob <- Problem(Maximize(t(w) %*% mu),
constraints = list(w >= 0, sum(w) == 1,
mean(u) <= mean(X_cum %*% w) + c,
u >= X_cum %*% w,
u[-1] >= u[-T]))
result <- solve(prob)
return(as.vector(result$getValue(w)))
}
w_AveDD_c004 <- portfolioAveDD(X_log_trn, c = 0.04)
w_AveDD_c006 <- portfolioAveDD(X_log_trn, c = 0.06)
w_AveDD_c008 <- portfolioAveDD(X_log_trn, c = 0.08)
# combine portfolios
w_all <- cbind(w_all,
"Ave-DD-c-004" = w_AveDD_c004,
"Ave-DD-c-006" = w_AveDD_c006,
"Ave-DD-c-008" = w_AveDD_c008)
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_tst))
t(AverageDrawdown(ret_all_trn))
t(AverageDrawdown(ret_all_tst))
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich8equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich8equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_all <- w_all[, ! colnames(w_all) %in% c("Ave-DD-c-006", "Ave-DD-c-008")]
portfolioCDaR <- function(X, c = 0.1, alpha = 0.95) {
T <- nrow(X)
N <- ncol(X)
X <- as.matrix(X)
X_cum <- apply(X, MARGIN = 2, FUN = cumsum)
mu <- colMeans(X)
# variables
w <- Variable(N)
z <- Variable(T)
zeta <- Variable(1)
u <- Variable(T)
# problem
prob <- Problem(Maximize(t(w) %*% mu),
constraints = list(w >= 0, sum(w) == 1,
zeta + (1/(T*(1-alpha))) * sum(z) <= c,
z >= 0, z >= u - X_cum %*% w - zeta,
u >= X_cum %*% w,
u[-1] >= u[-T]))
result <- solve(prob)
return(as.vector(result$getValue(w)))
}
# FIXME
w_CDaR095_c014 <- portfolioCDaR(X_log_trn, c = 0.14, alpha = 0.95)
w_CDaR095_c016 <- portfolioCDaR(X_log_trn, c = 0.16, alpha = 0.95)
w_CDaR099_c017 <- portfolioCDaR(X_log_trn, c = 0.17, alpha = 0.99)
w_CDaR099_c019 <- portfolioCDaR(X_log_trn, c = 0.19, alpha = 0.99)
# combine portfolios
w_all <- cbind(w_all,
"CDaR095-c-014" = w_CDaR095_c014,
"CDaR095-c-016" = w_CDaR095_c016,
"CDaR099-c-017" = w_CDaR099_c017,
"CDaR099-c-019" = w_CDaR099_c019)
# compute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
# performance
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_tst))
t(AverageDrawdown(ret_all_tst))
t(CDD(ret_all_trn))
t(CDD(ret_all_tst))
{ chart.CumReturns(ret_all, main = "Cumulative return of portfolios",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich10equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
chart.CumReturns(ret_all_tst, main = "Cumulative return of portfolios (out-of-sample)",
wealth.index = TRUE, legend.loc = "topleft", colorset = rich10equal)
{ chart.Drawdown(ret_all, main = "Drawdown of portfolios",
legend.loc = "bottomleft", colorset = rich10equal)
addEventLines(xts("training", index(X_lin[T_trn])), srt=90, pos=2, lwd = 2, col = "darkblue") }
w_all <- w_all[, ! colnames(w_all) %in% c("CDaR095-c-016", "CDaR099-c-017", "CDaR099-c-019")]
ret_all_tst
ret_all_tst
View(ret_all_tst)
# recompute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
t(table.AnnualizedReturns(ret_all_tst)[3, ])
# recompute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_tst))
t(AverageDrawdown(ret_all_tst))
t(CDD(ret_all_tst))
barplot(t(w_all), col = rainbow8equal[1:7], legend = colnames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "stocks", ylab = "dollars")
rainbow8equal[1:9]
rainbow10equal[1:9]
# recompute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_tst))
t(AverageDrawdown(ret_all_tst))
t(CDD(ret_all_tst))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "dollars")
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.8)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.7)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.7)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.6)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.3)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.4)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1.1, cex.names=.4)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1.2, cex.names=.4)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1.2, cex.names=.4, srt=45)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1.2, cex.names=.5, )
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=0, cex.names=.5, )
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5, )
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5, )
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5, )
barplot(w_all, col = rainbow10equal[1:9], legend = legend(rownames(w_all)), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5, )
barplot(w_all, col = rainbow10equal[1:9], legend = legend(legend = rownames(w_all)), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5, )
legend(rownames(w_all))
barplot(w_all, col = rainbow10equal[1:9],  beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5, )
legend(rownames(w_all))
legend(legend = rownames(w_all))
barplot(w_all, col = rainbow10equal[1:9],  beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5, )
legend(legend = rownames(w_all))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
legend("topleft", legend = rownames(w_all))
legend("topleft", legend = rownames(w_all), bg="transparent")
legend("topleft", legend = rownames(w_all), bg="transparent")
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
legend("topleft", legend = rownames(w_all), bg="transparent")
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
legend("topleft", legend = rownames(w_all), bg="transparent")
legend("topleft", legend = rownames(w_all), bg="transparent", col = rainbow10equal[1:9])
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
legend("topleft", legend = rownames(w_all), bg="transparent", col = rainbow10equal[1:9])
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
legend("topleft", legend = rownames(w_all), bg="transparent", col = rainbow10equal[1:9], cex=0.5)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.8)
legend("topleft", legend = rownames(w_all), bg="transparent", col = rainbow10equal[1:9], cex=0.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.8)
legend("topleft", legend = rownames(w_all), bg="transparent", color = rainbow10equal[1:9], cex=0.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.8)
legend("topleft", legend = rownames(w_all), bg="transparent", col = rainbow10equal[1:9], cex=0.8, bty = "n")
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, args.legend = list(x = "topright", bty = "n", inset = c(-0.33, 0.3)), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, args.legend = list(x = "mid", bty = "n"), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, args.legend = list(x = "mid", bty = "n"), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, args.legend = list(x = "topright", bty = "n"), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, args.legend = list(x = "topright", bty = "n"), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, legend = colnames(w_MVP_all), args.legend = list(x = "topright", bty = "n"), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, legend = colnames(ret_all), args.legend = list(x = "topright", bty = "n"), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
barplot(w_all, col = rainbow10equal[1:9], beside = TRUE, legend = rownames(ret_all), args.legend = list(x = "topright", bty = "n"), main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.8)
rownames(ret_all)
View(ret_all)
View(ret_all)
# recompute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_tst))
t(AverageDrawdown(ret_all_tst))
t(CDD(ret_all_tst))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=1, cex.names=.5)
# recompute returns of all portfolios
ret_all <- xts(X_lin %*% w_all, index(X_lin))
ret_all_trn <- ret_all[1:T_trn, ]
ret_all_tst <- ret_all[-c(1:T_trn), ]
t(table.AnnualizedReturns(ret_all_tst)[3, ])
t(maxDrawdown(ret_all_tst))
t(AverageDrawdown(ret_all_tst))
t(CDD(ret_all_tst))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE, horiz = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(cex=0.8),beside = TRUE,
main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights",
las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(cex=0.8, horiz=TRUE), beside = TRUE,main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list("top", cex=0.8, horiz=FALSE), beside = TRUE,main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list("top", cex=0.8, horiz=FALSE), beside = TRUE,main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list("topleft", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(position="topleft", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list("topleft", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(bty = "n", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x = "top", bty = "n", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(bty = "n", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(bty = "n", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(bty = "n", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(bty = "n", cex=0.8, horiz=FALSE), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33, 0.3)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33, 0.3)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33, 0.3)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33, 0.3)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 2, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 2, 2))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 2, 3))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 2, 4))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.33,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(0,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 8))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 2))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 3))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)}
x <- barplot(table(mtcars$cyl), xaxt="n")
labs <- paste(names(table(mtcars$cyl)), "cylinders")
text(cex=1, x=x-.25, y=-1.25, labs, xpd=TRUE, srt=45)
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 3))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.5)
text(seq(1.5, end_point, by = 2), par("usr")[3]-0.25,
srt = 60, adj = 1, xpd = TRUE,
labels = paste(rownames(mtcars)), cex = 0.65)}
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.6)}
{par(mfrow = c(1, 1), mar = c(5, 5, 4, 3))
barplot(w_all, col = rainbow10equal[1:9], legend = rownames(w_all), args.legend = list(x="topright", bty = "n", cex=0.8, horiz=FALSE, inset = c(-0.1,0)), beside = TRUE, main = "Portfolio allocation", xlab = "portfolio design", ylab = "weights", las=2, cex.names=.6)}
publish_book()
bookdown::publish_book()
bookdown::publish_book()
pacman::p_load(tidyverse,tidyquant,PortfolioAnalytics,quantmod,PerformanceAnalytics,
tibbletime,timetk,ggthemes,timeDate,Quandl,alphavantager,readxl,FFdownload,broom,
DEoptim,pso,GenSA,Rglpk,ROI,ROI.plugin.glpk,ROI.plugin.quadprog,doParallel
)
install.packages(pacman)
install.packages("pacman")
pacman::p_load(tidyverse,tidyquant,PortfolioAnalytics,quantmod,PerformanceAnalytics,
tibbletime,timetk,ggthemes,timeDate,Quandl,alphavantager,readxl,FFdownload,broom,
DEoptim,pso,GenSA,Rglpk,ROI,ROI.plugin.glpk,ROI.plugin.quadprog,doParallel)
