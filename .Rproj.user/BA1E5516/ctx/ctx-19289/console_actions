{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "        legend = colnames(w_MVP_all), args.legend = list(x = nrow(w_MVP_all) + 0.1, inset = 0.04), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = nrow(w_MVP_all) + 5, inset = 0.04), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "nrow(w_MVP_all)",
        "[1] 9\n",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = 14, inset = 0.04), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = nrow(w_MVP_all)*ncol(w_MVP_all) + 5, inset = 0.04), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = nrow(w_MVP_all)*ncol(w_MVP_all) + 5, bty = \"n\"), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = topright, bty = \"n\"), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "Error in barplot.default(t(w_MVP_all), col = rainbow8equal[1:3], legend = colnames(w_MVP_all),  : \n  object 'topright' not found\n",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\"), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset=c(-0.15, 0)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset=c(-2, 0)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset=c(-1, 0)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset=c(-1, 0)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\"), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\"), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\"), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\")",
        "> ",
        "mu_lin <- colMeans(X_lin_trn)",
        "> ",
        "Sigma_lin <- cov(X_lin_trn)",
        "> ",
        "mu_log <- colMeans(X_log_trn)",
        "> ",
        "Sigma_log <- cov(X_log_trn)",
        "> ",
        "# estimate from log returns plus transformation",
        "> ",
        "momentsReturnLog2Lin <- function(mu, Sigma) {",
        "+ ",
        "  N <- ncol(Sigma)",
        "+ ",
        "  mu_ <- exp(mu + 0.5*diag(Sigma)) - 1",
        "+ ",
        "  Sigma_ <- matrix(NA, nrow = N, ncol = N)",
        "+ ",
        "  for(ii in 1:N)",
        "+ ",
        "    for(jj in 1:N)",
        "+ ",
        "      Sigma_[ii, jj] <- exp(mu[ii] + mu[jj] + 0.5*(Sigma[ii, ii]+Sigma[jj, jj])) * (exp(Sigma[ii, jj])-1)",
        "+ ",
        "  return( list(mu=mu_, Sigma=Sigma_) )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_log, Sigma_log)",
        "> ",
        "mu_log_trans <- tmp$mu",
        "> ",
        "Sigma_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "# compute the three versions of MVP",
        "> ",
        "w_MVP_lin <- MVP(mu_lin, Sigma_lin)",
        "> ",
        "w_MVP_log <- MVP(mu_log, Sigma_log)",
        "> ",
        "w_MVP_log_trans <- MVP(mu_log_trans, Sigma_log_trans)",
        "> ",
        "w_MVP_all <- cbind(\"MVP_lin\"       = w_MVP_lin, ",
        "+ ",
        "                   \"MVP_log\"       = w_MVP_log, ",
        "+ ",
        "                   \"MVP_log_trans\" = w_MVP_log_trans)",
        "> ",
        "",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\"), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(0,-0.1)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "mu_lin <- colMeans(X_lin_trn)",
        "> ",
        "Sigma_lin <- cov(X_lin_trn)",
        "> ",
        "mu_log <- colMeans(X_log_trn)",
        "> ",
        "Sigma_log <- cov(X_log_trn)",
        "> ",
        "# estimate from log returns plus transformation",
        "> ",
        "momentsReturnLog2Lin <- function(mu, Sigma) {",
        "+ ",
        "  N <- ncol(Sigma)",
        "+ ",
        "  mu_ <- exp(mu + 0.5*diag(Sigma)) - 1",
        "+ ",
        "  Sigma_ <- matrix(NA, nrow = N, ncol = N)",
        "+ ",
        "  for(ii in 1:N)",
        "+ ",
        "    for(jj in 1:N)",
        "+ ",
        "      Sigma_[ii, jj] <- exp(mu[ii] + mu[jj] + 0.5*(Sigma[ii, ii]+Sigma[jj, jj])) * (exp(Sigma[ii, jj])-1)",
        "+ ",
        "  return( list(mu=mu_, Sigma=Sigma_) )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_log, Sigma_log)",
        "> ",
        "mu_log_trans <- tmp$mu",
        "> ",
        "Sigma_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "# compute the three versions of MVP",
        "> ",
        "w_MVP_lin <- MVP(mu_lin, Sigma_lin)",
        "> ",
        "w_MVP_log <- MVP(mu_log, Sigma_log)",
        "> ",
        "w_MVP_log_trans <- MVP(mu_log_trans, Sigma_log_trans)",
        "> ",
        "w_MVP_all <- cbind(\"MVP_lin\"       = w_MVP_lin, ",
        "+ ",
        "                   \"MVP_log\"       = w_MVP_log, ",
        "+ ",
        "                   \"MVP_log_trans\" = w_MVP_log_trans)",
        "> ",
        "",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(-1,0)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(-0.11,0)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "mu_lin <- colMeans(X_lin_trn)",
        "> ",
        "Sigma_lin <- cov(X_lin_trn)",
        "> ",
        "mu_log <- colMeans(X_log_trn)",
        "> ",
        "Sigma_log <- cov(X_log_trn)",
        "> ",
        "# estimate from log returns plus transformation",
        "> ",
        "momentsReturnLog2Lin <- function(mu, Sigma) {",
        "+ ",
        "  N <- ncol(Sigma)",
        "+ ",
        "  mu_ <- exp(mu + 0.5*diag(Sigma)) - 1",
        "+ ",
        "  Sigma_ <- matrix(NA, nrow = N, ncol = N)",
        "+ ",
        "  for(ii in 1:N)",
        "+ ",
        "    for(jj in 1:N)",
        "+ ",
        "      Sigma_[ii, jj] <- exp(mu[ii] + mu[jj] + 0.5*(Sigma[ii, ii]+Sigma[jj, jj])) * (exp(Sigma[ii, jj])-1)",
        "+ ",
        "  return( list(mu=mu_, Sigma=Sigma_) )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_log, Sigma_log)",
        "> ",
        "mu_log_trans <- tmp$mu",
        "> ",
        "Sigma_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "# compute the three versions of MVP",
        "> ",
        "w_MVP_lin <- MVP(mu_lin, Sigma_lin)",
        "> ",
        "w_MVP_log <- MVP(mu_log, Sigma_log)",
        "> ",
        "w_MVP_log_trans <- MVP(mu_log_trans, Sigma_log_trans)",
        "> ",
        "w_MVP_all <- cbind(\"MVP_lin\"       = w_MVP_lin, ",
        "+ ",
        "                   \"MVP_log\"       = w_MVP_log, ",
        "+ ",
        "                   \"MVP_log_trans\" = w_MVP_log_trans)",
        "> ",
        "",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(-0.25,0)), ",
        "+ ",
        "        main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(-0.25,0)), main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(05,0)), main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(0,0)), main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", xpd=TRUE, inset = c(0,0)), main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "Error: The specified directory 'C:/Users/jshen/Desktop/EDHEC/portr' does not exist.\n",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"bottom\", bty = \"n\", xpd=TRUE, inset = c(0,0)), main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "Error: The specified directory 'C:/Users/jshen/Desktop/EDHEC/portr' does not exist.\n",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\"), main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\"), inset = c(-0.5, -0.3), main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.5, -0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "par(mfrow=c(1, 1), mar=c(5, 5, 4, 10))",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.5, -0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(0, -0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(0, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-1, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.1, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.3, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "par(mfrow=c(1, 1), mar=c(5, 5, 4, 120))",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "Error in plot.new() : figure margins too large\n",
        "> ",
        "par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-1, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-1, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "",
        "> ",
        "par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.2, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.3, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "Error: unexpected '}' in:\n\"barplot(t(w_MVP_all), col = rainbow8equal[1:3], \n        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.3, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}\"\n",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.3, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 0)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 1)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "Error: unexpected '}' in:\n\"barplot(t(w_MVP_all), col = rainbow8equal[1:3], \n        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 1)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}\"\n",
        "> ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 1)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "Error: unexpected '}' in:\n\"barplot(t(w_MVP_all), col = rainbow8equal[1:3], \n        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 1)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}\"\n",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 1)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0, 1)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 0.5)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 0.7)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 12))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 10))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.4, 0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 10))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.3, 0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 10))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.33, 0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 8))",
        "+ ",
        "barplot(t(w_MVP_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.33, 0.3)),  main = \"GMVP allocation\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "SharpeRatio.annualized(ret_GMVP_all_trn)",
        "Error in is.xts(x) : object 'ret_GMVP_all_trn' not found\n",
        "> ",
        "SharpeRatio.annualized(ret_MVP_all_trn)",
        "Error in is.xts(x) : object 'ret_MVP_all_trn' not found\n",
        "> ",
        "# compute returns of the portfolios",
        "> ",
        "ret_MVP_all_trn <- xts(X_lin_trn %*% w_MVP_all, index(X_lin_trn))",
        "> ",
        "SharpeRatio.annualized(ret_MVP_all_trn)",
        "                                 MVP_lin   MVP_log MVP_log_trans\nAnnualized Sharpe Ratio (Rf=0%) 1.288839 0.9953928      1.226824\n",
        "> ",
        "# change periodicity of prices",
        "> ",
        "prices_weekly <- xts()",
        "> ",
        "for (i in 1:ncol(prices))",
        "+ ",
        "  prices_weekly <- cbind(prices_weekly, Cl(to.weekly(prices[, i])))",
        "> ",
        "colnames(prices_weekly) <- colnames(prices)",
        "> ",
        "indexClass(prices_weekly) <- \"Date\"",
        "> ",
        "",
        "> ",
        "periodicity(prices_weekly)",
        "Weekly periodicity from 2016-01-08 to 2020-10-29 \n",
        "> ",
        "# change periodicity of prices",
        "> ",
        "prices_weekly <- xts()",
        "> ",
        "for (i in 1:ncol(prices))",
        "+ ",
        "  prices_weekly <- cbind(prices_weekly, Cl(to.weekly(prices[, i])))",
        "> ",
        "colnames(prices_weekly) <- colnames(prices)",
        "> ",
        "",
        "> ",
        "periodicity(prices_weekly)",
        "Weekly periodicity from 2016-01-08 01:00:00 to 2020-10-29 01:00:00 \n",
        "> ",
        "# change periodicity of prices",
        "> ",
        "prices_weekly <- xts()",
        "> ",
        "for (i in 1:ncol(prices))",
        "+ ",
        "  prices_weekly <- cbind(prices_weekly, Cl(to.weekly(prices[, i])))",
        "> ",
        "colnames(prices_weekly) <- colnames(prices)",
        "> ",
        "tclass(prices_weekly) <- \"Date\"",
        "> ",
        "",
        "> ",
        "# recompute returns",
        "> ",
        "X_weekly_log <- CalculateReturns(prices_weekly, \"log\")[-1]",
        "> ",
        "X_weekly_lin <- CalculateReturns(prices_weekly)[-1]",
        "> ",
        "T_weekly <- nrow(X_weekly_log)  # number of weeks",
        "> ",
        "",
        "> ",
        "# split data into training and set data",
        "> ",
        "T_weekly_trn <- round(0.7*T_weekly)  # 70% of data",
        "> ",
        "X_weekly_log_trn <- X_weekly_log[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_log_tst <- X_weekly_log[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "X_weekly_lin_trn <- X_weekly_lin[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_lin_tst <- X_weekly_lin[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "",
        "> ",
        "# estimate mu and Sigma",
        "> ",
        "mu_weekly_lin <- colMeans(X_weekly_lin_trn)",
        "> ",
        "Sigma_weekly_lin <- cov(X_weekly_lin_trn)",
        "> ",
        "",
        "> ",
        "mu_weekly_log <- colMeans(X_weekly_log_trn)",
        "> ",
        "Sigma_weekly_log <- cov(X_weekly_log_trn)",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_weekly_log, Sigma_weekly_log)",
        "> ",
        "mu_weekly_log_trans <- tmp$mu",
        "> ",
        "Sigma_weekly_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "# compute GMVPs",
        "> ",
        "w_GMVP_weekly_lin <- GMVP(Sigma_weekly_lin)",
        "> ",
        "w_GMVP_weekly_log <- GMVP(Sigma_weekly_log)",
        "> ",
        "w_GMVP_weekly_log_trans <- GMVP(Sigma_weekly_log_trans)",
        "> ",
        "w_GMVP_weekly_all <- cbind(\"GMVP_lin\"       = w_GMVP_weekly_lin, ",
        "+ ",
        "                           \"GMVP_log\"       = w_GMVP_weekly_log, ",
        "+ ",
        "                           \"GMVP_log_trans\" = w_GMVP_weekly_log_trans)",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 8))",
        "+ ",
        "barplot(t(w_GMVP_weekly_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_GMVP_weekly_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.33, 0.3)),  main = \"GMVP allocation (daily return)\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "",
        "> ",
        "# change periodicity of prices",
        "> ",
        "prices_weekly <- xts()",
        "> ",
        "for (i in 1:ncol(prices))",
        "+ ",
        "  prices_weekly <- cbind(prices_weekly, Cl(to.weekly(prices[, i])))",
        "> ",
        "colnames(prices_weekly) <- colnames(prices)",
        "> ",
        "tclass(prices_weekly) <- \"Date\"",
        "> ",
        "",
        "> ",
        "# recompute returns",
        "> ",
        "X_weekly_log <- CalculateReturns(prices_weekly, \"log\")[-1]",
        "> ",
        "X_weekly_lin <- CalculateReturns(prices_weekly)[-1]",
        "> ",
        "T_weekly <- nrow(X_weekly_log)  # number of weeks",
        "> ",
        "",
        "> ",
        "# split data into training and set data",
        "> ",
        "T_weekly_trn <- round(0.7*T_weekly)  # 70% of data",
        "> ",
        "X_weekly_log_trn <- X_weekly_log[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_log_tst <- X_weekly_log[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "X_weekly_lin_trn <- X_weekly_lin[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_lin_tst <- X_weekly_lin[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "",
        "> ",
        "# estimate mu and Sigma",
        "> ",
        "mu_weekly_lin <- colMeans(X_weekly_lin_trn)",
        "> ",
        "Sigma_weekly_lin <- cov(X_weekly_lin_trn)",
        "> ",
        "",
        "> ",
        "mu_weekly_log <- colMeans(X_weekly_log_trn)",
        "> ",
        "Sigma_weekly_log <- cov(X_weekly_log_trn)",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_weekly_log, Sigma_weekly_log)",
        "> ",
        "mu_weekly_log_trans <- tmp$mu",
        "> ",
        "Sigma_weekly_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "# compute MVPs",
        "> ",
        "w_MVP_weekly_lin <- MVP(mu_weekly_lin, Sigma_weekly_lin)",
        "> ",
        "w_MVP_weekly_log <- MVP(mu_weekly_log, Sigma_weekly_log)",
        "> ",
        "w_MVP_weekly_log_trans <- MVP(mu_weekly_log_trans, Sigma_weekly_log_trans)",
        "> ",
        "w_MVP_weekly_all <- cbind(\"MVP_lin\"       = w_MVP_weekly_lin, ",
        "+ ",
        "                          \"MVP_log\"       = w_MVP_weekly_log, ",
        "+ ",
        "                          \"MVP_log_trans\" = w_MVP_weekly_log_trans)",
        "> ",
        "barplot(t(w_MVP_weekly_all), col = rainbow8equal[1:3], legend = colnames(w_MVP_weekly_all), ",
        "+ ",
        "        main = \"MVP allocation for weekly returns\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 8))",
        "+ ",
        "barplot(t(w_MVP_weekly_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_weekly_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.33, 0.3)),  main = \"GMVP allocation (weekly return)\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "",
        "> ",
        "# change periodicity of prices",
        "> ",
        "prices_weekly <- xts()",
        "> ",
        "for (i in 1:ncol(prices))",
        "+ ",
        "  prices_weekly <- cbind(prices_weekly, Cl(to.weekly(prices[, i])))",
        "> ",
        "colnames(prices_weekly) <- colnames(prices)",
        "> ",
        "tclass(prices_weekly) <- \"Date\"",
        "> ",
        "",
        "> ",
        "# recompute returns",
        "> ",
        "X_weekly_log <- CalculateReturns(prices_weekly, \"log\")[-1]",
        "> ",
        "X_weekly_lin <- CalculateReturns(prices_weekly)[-1]",
        "> ",
        "T_weekly <- nrow(X_weekly_log)  # number of weeks",
        "> ",
        "",
        "> ",
        "# split data into training and set data",
        "> ",
        "T_weekly_trn <- round(0.7*T_weekly)  # 70% of data",
        "> ",
        "X_weekly_log_trn <- X_weekly_log[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_log_tst <- X_weekly_log[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "X_weekly_lin_trn <- X_weekly_lin[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_lin_tst <- X_weekly_lin[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "",
        "> ",
        "# estimate mu and Sigma",
        "> ",
        "mu_weekly_lin <- colMeans(X_weekly_lin_trn)",
        "> ",
        "Sigma_weekly_lin <- cov(X_weekly_lin_trn)",
        "> ",
        "",
        "> ",
        "mu_weekly_log <- colMeans(X_weekly_log_trn)",
        "> ",
        "Sigma_weekly_log <- cov(X_weekly_log_trn)",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_weekly_log, Sigma_weekly_log)",
        "> ",
        "mu_weekly_log_trans <- tmp$mu",
        "> ",
        "Sigma_weekly_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "# compute MVPs",
        "> ",
        "w_MVP_weekly_lin <- MVP(mu_weekly_lin, Sigma_weekly_lin)",
        "> ",
        "w_MVP_weekly_log <- MVP(mu_weekly_log, Sigma_weekly_log)",
        "> ",
        "w_MVP_weekly_log_trans <- MVP(mu_weekly_log_trans, Sigma_weekly_log_trans)",
        "> ",
        "w_MVP_weekly_all <- cbind(\"MVP_lin\"       = w_MVP_weekly_lin, ",
        "+ ",
        "                          \"MVP_log\"       = w_MVP_weekly_log, ",
        "+ ",
        "                          \"MVP_log_trans\" = w_MVP_weekly_log_trans)",
        "> ",
        "barplot(t(w_MVP_weekly_all), col = rainbow8equal[1:3], legend = colnames(w_MVP_weekly_all), ",
        "+ ",
        "        main = \"MVP allocation for weekly returns\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 8))",
        "+ ",
        "barplot(t(w_MVP_weekly_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_weekly_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.33, 0.3)),  main = \"MVP allocation (weekly return)\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "",
        "> ",
        "# change periodicity of prices",
        "> ",
        "prices_weekly <- xts()",
        "> ",
        "for (i in 1:ncol(prices))",
        "+ ",
        "  prices_weekly <- cbind(prices_weekly, Cl(to.weekly(prices[, i])))",
        "> ",
        "colnames(prices_weekly) <- colnames(prices)",
        "> ",
        "tclass(prices_weekly) <- \"Date\"",
        "> ",
        "",
        "> ",
        "# recompute returns",
        "> ",
        "X_weekly_log <- CalculateReturns(prices_weekly, \"log\")[-1]",
        "> ",
        "X_weekly_lin <- CalculateReturns(prices_weekly)[-1]",
        "> ",
        "T_weekly <- nrow(X_weekly_log)  # number of weeks",
        "> ",
        "",
        "> ",
        "# split data into training and set data",
        "> ",
        "T_weekly_trn <- round(0.7*T_weekly)  # 70% of data",
        "> ",
        "X_weekly_log_trn <- X_weekly_log[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_log_tst <- X_weekly_log[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "X_weekly_lin_trn <- X_weekly_lin[1:T_weekly_trn, ]",
        "> ",
        "X_weekly_lin_tst <- X_weekly_lin[(T_weekly_trn+1):T_weekly, ]",
        "> ",
        "",
        "> ",
        "# estimate mu and Sigma",
        "> ",
        "mu_weekly_lin <- colMeans(X_weekly_lin_trn)",
        "> ",
        "Sigma_weekly_lin <- cov(X_weekly_lin_trn)",
        "> ",
        "",
        "> ",
        "mu_weekly_log <- colMeans(X_weekly_log_trn)",
        "> ",
        "Sigma_weekly_log <- cov(X_weekly_log_trn)",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_weekly_log, Sigma_weekly_log)",
        "> ",
        "mu_weekly_log_trans <- tmp$mu",
        "> ",
        "Sigma_weekly_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "# compute MVPs",
        "> ",
        "w_MVP_weekly_lin <- MVP(mu_weekly_lin, Sigma_weekly_lin)",
        "> ",
        "w_MVP_weekly_log <- MVP(mu_weekly_log, Sigma_weekly_log)",
        "> ",
        "w_MVP_weekly_log_trans <- MVP(mu_weekly_log_trans, Sigma_weekly_log_trans)",
        "> ",
        "w_MVP_weekly_all <- cbind(\"MVP_lin\"       = w_MVP_weekly_lin, ",
        "+ ",
        "                          \"MVP_log\"       = w_MVP_weekly_log, ",
        "+ ",
        "                          \"MVP_log_trans\" = w_MVP_weekly_log_trans)",
        "> ",
        "",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 8))",
        "+ ",
        "barplot(t(w_MVP_weekly_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_weekly_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.33, 0.3)),  main = \"MVP allocation (weekly return)\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "",
        "> ",
        "SharpeRatio(ret_MVP_weekly_all_trn, FUN = \"StdDev\")",
        "Error in is.xts(x) : object 'ret_MVP_weekly_all_trn' not found\n",
        "> ",
        "ret_MVP_weekly_all_trn <- xts(X_weekly_lin_trn %*% w_MVP_weekly_all, index(X_weekly_lin_trn))",
        "> ",
        "SharpeRatio(ret_MVP_weekly_all_trn, FUN = \"StdDev\")",
        "                                MVP_lin   MVP_log MVP_log_trans\nStdDev Sharpe (Rf=0%, p=95%): 0.2007609 0.1774218      0.200146\n",
        "> ",
        "# compute returns of the portfolios",
        "> ",
        "ret_MVP_all_trn <- xts(X_lin_trn %*% w_MVP_all, index(X_lin_trn))",
        "> ",
        "SharpeRatio.annualized(ret_MVP_all_trn)",
        "                                 MVP_lin   MVP_log MVP_log_trans\nAnnualized Sharpe Ratio (Rf=0%) 1.288839 0.9953928      1.226824\n",
        "Error: The specified directory 'C:/Users/jshen/Desktop/EDHEC/portr' does not exist.\n",
        "> ",
        "X_monthly_log <- CalculateReturns(prices_monthly, \"log\")[-1]",
        "Error in is.xts(x) : object 'prices_monthly' not found\n",
        "> ",
        "# TODO wrap it into function ",
        "> ",
        "",
        "> ",
        "prices_monthly <- xts()",
        "> ",
        "for (i in 1:ncol(prices))",
        "+ ",
        "  prices_monthly <- cbind(prices_monthly, Cl(to.monthly(prices[, i])))",
        "> ",
        "colnames(prices_monthly) <- colnames(prices)",
        "> ",
        "indexClass(prices_monthly) <- \"Date\"",
        "> ",
        "",
        "> ",
        "X_monthly_log <- CalculateReturns(prices_monthly, \"log\")[-1]",
        "> ",
        "X_monthly_lin <- CalculateReturns(prices_monthly)[-1]",
        "> ",
        "T_monthly <- nrow(X_monthly_log)  # number of months",
        "> ",
        "",
        "> ",
        "# split data into training and set data",
        "> ",
        "T_monthly_trn <- round(0.7*T_monthly)  # 70% of data",
        "> ",
        "X_monthly_log_trn <- X_monthly_log[1:T_monthly_trn, ]",
        "> ",
        "X_monthly_log_tst <- X_monthly_log[(T_monthly_trn+1):T_monthly, ]",
        "> ",
        "X_monthly_lin_trn <- X_monthly_lin[1:T_monthly_trn, ]",
        "> ",
        "X_monthly_lin_tst <- X_monthly_lin[(T_monthly_trn+1):T_monthly, ]",
        "> ",
        "",
        "> ",
        "# estimate mu and Sigma",
        "> ",
        "mu_monthly_lin <- colMeans(X_monthly_lin_trn)",
        "> ",
        "Sigma_monthly_lin <- cov(X_monthly_lin_trn)",
        "> ",
        "",
        "> ",
        "mu_monthly_log <- colMeans(X_monthly_log_trn)",
        "> ",
        "Sigma_monthly_log <- cov(X_monthly_log_trn)",
        "> ",
        "",
        "> ",
        "tmp <- momentsReturnLog2Lin(mu_monthly_log, Sigma_monthly_log)",
        "> ",
        "mu_monthly_log_trans <- tmp$mu",
        "> ",
        "Sigma_monthly_log_trans <- tmp$Sigma",
        "> ",
        "",
        "> ",
        "w_MVP_monthly_lin <- MVP(mu_monthly_lin, Sigma_monthly_lin)",
        "> ",
        "w_MVP_monthly_log <- MVP(mu_monthly_log, Sigma_monthly_log)",
        "> ",
        "w_MVP_monthly_log_trans <- MVP(mu_monthly_log_trans, Sigma_monthly_log_trans)",
        "> ",
        "w_MVP_monthly_all <- cbind(\"MVP_lin\"       = w_MVP_monthly_lin, ",
        "+ ",
        "                           \"MVP_log\"       = w_MVP_monthly_log, ",
        "+ ",
        "                           \"MVP_log_trans\" = w_MVP_monthly_log_trans)",
        "> ",
        "",
        "> ",
        "{par(mfrow=c(1, 1), mar=c(5, 5, 4, 8))",
        "+ ",
        "barplot(t(w_MVP_monthly_all), col = rainbow8equal[1:3], ",
        "+ ",
        "        legend = colnames(w_MVP_monthly_all), args.legend = list(x = \"topright\", bty = \"n\", inset = c(-0.33, 0.3)),  main = \"MVP allocation (weekly return)\", xlab = \"stocks\", ylab = \"dollars\", beside = TRUE)}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ret_MVP_monthly_all_trn <- xts(X_monthly_lin_trn %*% w_MVP_monthly_all, index(X_monthly_lin_trn))",
        "> ",
        "SharpeRatio(ret_MVP_monthly_all_trn, FUN = \"StdDev\")",
        "                                MVP_lin  MVP_log MVP_log_trans\nStdDev Sharpe (Rf=0%, p=95%): 0.4375749 0.410735     0.4385216\n",
        "> ",
        "ret_MVP_monthly_all_trn <- xts(X_monthly_lin_trn %*% w_MVP_monthly_all, index(X_monthly_lin_trn))",
        "> ",
        "SharpeRatio.annualized(ret_MVP_monthly_all_trn, FUN = \"StdDev\")",
        "Error in SharpeRatio.annualized(ret_MVP_monthly_all_trn, FUN = \"StdDev\") : \n  unused argument (FUN = \"StdDev\")\n",
        "> ",
        "ret_MVP_monthly_all_trn <- xts(X_monthly_lin_trn %*% w_MVP_monthly_all, index(X_monthly_lin_trn))",
        "> ",
        "SharpeRatio(ret_MVP_monthly_all_trn, FUN = \"StdDev\")",
        "                                MVP_lin  MVP_log MVP_log_trans\nStdDev Sharpe (Rf=0%, p=95%): 0.4375749 0.410735     0.4385216\n",
        "> ",
        "tClass(prices_monthly)",
        "Error in tClass(prices_monthly) : could not find function \"tClass\"\n",
        "> ",
        "tclass(prices_monthly) <- \"Date\"",
        "> ",
        "par(mfrow=c(2,1))",
        "> ",
        "plot(SP500_index, main=NULL)",
        "> ",
        "plot(X_log_sp, main=NULL)",
        "\nRestarting R session...\n\n"
    ]
}