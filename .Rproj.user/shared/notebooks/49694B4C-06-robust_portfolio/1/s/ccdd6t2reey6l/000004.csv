"0","# clairvoyant solutions"
"0","w_Markowitz <- MVP(mu, Sigma, long_only = TRUE)"
"0","names(w_Markowitz) <- colnames(X)"
"0","portfolioMaxSharpeRatio <- function(mu, Sigma) {"
"0","  w_ <- Variable(nrow(Sigma))"
"0","  prob <- Problem(Minimize(quad_form(w_, Sigma)),"
"0","                  constraints = list(w_ >= 0, t(mu) %*% w_ == 1))"
"0","  result <- solve(prob)"
"0","  w <- as.vector(result$getValue(w_)/sum(result$getValue(w_)))"
"0","  names(w) <- colnames(Sigma)"
"0","  return(w)"
"0","}"
"0","w_MaxSR <- portfolioMaxSharpeRatio(mu, Sigma)"
"0","names(w_MaxSR) <- colnames(X)"
"0",""
"0","# multiple naive and robust solutions"
"0","kappa <- 0.25  # smaller gives some bad outliers"
"0","delta <- 0.01*sqrt(T)  #larger gives a much more stable performance"
"0","w_all_Markowitz_naive <- NULL"
"0","w_all_Markowitz_robust <- NULL"
"0","set.seed(357)"
"0","for (i in 1:10) {"
"0","  X_noisy <- rmvnorm(n = T, mean = mu, sigma = Sigma)"
"0","  mu_noisy <- colMeans(X_noisy)"
"0","  Sigma_noisy <- cov(X_noisy)"
"0","  "
"0","  w_Markowitz_noisy <- MVP(mu_noisy, Sigma_noisy, long_only = TRUE)"
"0","  w_Markowitz_robust_noisy <- portfolioMarkowitzRobust(mu_noisy, Sigma_noisy, kappa, delta/sqrt(T-1))"
"0","  w_all_Markowitz_naive <- cbind(w_all_Markowitz_naive, w_Markowitz_noisy)"
"0","  w_all_Markowitz_robust <- cbind(w_all_Markowitz_robust, w_Markowitz_robust_noisy)"
"0","}"
"0",""
"0","# performance"
"0","mean_variance <- function(w, mu, Sigma) "
"0","  return(t(w) %*% mu - 0.5 * t(w) %*% Sigma %*% w)"
"0",""
"0","Sharpe_ratio <- function(w, mu, Sigma) "
"0","  return(t(w) %*% mu / sqrt(t(w) %*% Sigma %*% w))"
"0",""
"0","mean_variance_clairvoyant <- mean_variance(w_Markowitz, mu, Sigma)"
"0","mean_variance_naive <- apply(w_all_Markowitz_naive, MARGIN = 2, FUN = mean_variance, mu, Sigma)"
"0","mean_variance_robust <- apply(w_all_Markowitz_robust, MARGIN = 2, FUN = mean_variance, mu, Sigma)"
"0",""
"0","SR_clairvoyant <- Sharpe_ratio(w_MaxSR, mu, Sigma)"
"0","SR_naive <- apply(w_all_Markowitz_naive, MARGIN = 2, FUN = Sharpe_ratio, mu, Sigma)"
"0","SR_robust <- apply(w_all_Markowitz_robust, MARGIN = 2, FUN = Sharpe_ratio, mu, Sigma)"
